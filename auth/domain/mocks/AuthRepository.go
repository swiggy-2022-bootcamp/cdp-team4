// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/auth/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/auth/utils/errs"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// FindByAuthToken provides a mock function with given fields: _a0
func (_m *AuthRepository) FindByAuthToken(_a0 string) (*domain.AuthModel, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 *domain.AuthModel
	if rf, ok := ret.Get(0).(func(string) *domain.AuthModel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuthModel)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *AuthRepository) Save(_a0 domain.AuthModel) *errs.AppError {
	ret := _m.Called(_a0)

	var r0 *errs.AppError
	if rf, ok := ret.Get(0).(func(domain.AuthModel) *errs.AppError); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*errs.AppError)
		}
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepository(t testing.TB) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
