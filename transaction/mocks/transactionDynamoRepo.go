// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/transaction/domain (interfaces: TransactionRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/transaction/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/transaction/utils/errs"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// FindTransactionById mocks base method.
func (m *MockTransactionRepository) FindTransactionById(arg0 string) (*domain.Transaction, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionById", arg0)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindTransactionById indicates an expected call of FindTransactionById.
func (mr *MockTransactionRepositoryMockRecorder) FindTransactionById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionById", reflect.TypeOf((*MockTransactionRepository)(nil).FindTransactionById), arg0)
}

// FindTransactionByUserId mocks base method.
func (m *MockTransactionRepository) FindTransactionByUserId(arg0 string) (*domain.Transaction, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTransactionByUserId", arg0)
	ret0, _ := ret[0].(*domain.Transaction)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindTransactionByUserId indicates an expected call of FindTransactionByUserId.
func (mr *MockTransactionRepositoryMockRecorder) FindTransactionByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTransactionByUserId", reflect.TypeOf((*MockTransactionRepository)(nil).FindTransactionByUserId), arg0)
}

// InsertTransaction mocks base method.
func (m *MockTransactionRepository) InsertTransaction(arg0 domain.Transaction) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTransactionRepositoryMockRecorder) InsertTransaction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).InsertTransaction), arg0)
}

// UpdateTransactionByUserId mocks base method.
func (m *MockTransactionRepository) UpdateTransactionByUserId(arg0 string, arg1 int) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateTransactionByUserId indicates an expected call of UpdateTransactionByUserId.
func (mr *MockTransactionRepositoryMockRecorder) UpdateTransactionByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByUserId", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateTransactionByUserId), arg0, arg1)
}
