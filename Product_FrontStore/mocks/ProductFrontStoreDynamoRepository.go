// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/Product_FrontStore/domain"
)

// ProductFrontStoreDynamoRepository is an autogenerated mock type for the ProductFrontStoreDynamoRepository type
type ProductFrontStoreDynamoRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields:
func (_m *ProductFrontStoreDynamoRepository) Find() ([]domain.Product, error) {
	ret := _m.Called()

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategoryID provides a mock function with given fields: _a0
func (_m *ProductFrontStoreDynamoRepository) FindByCategoryID(_a0 string) ([]domain.Product, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(string) []domain.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProductID provides a mock function with given fields: _a0
func (_m *ProductFrontStoreDynamoRepository) FindByProductID(_a0 string) (domain.Product, error) {
	ret := _m.Called(_a0)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(string) domain.Product); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
