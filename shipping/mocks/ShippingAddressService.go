// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/shipping/domain (interfaces: ShippingAddressService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/shipping/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/shipping/utils/errs"
)

// MockShippingAddressService is a mock of ShippingAddressService interface.
type MockShippingAddressService struct {
	ctrl     *gomock.Controller
	recorder *MockShippingAddressServiceMockRecorder
}

// MockShippingAddressServiceMockRecorder is the mock recorder for MockShippingAddressService.
type MockShippingAddressServiceMockRecorder struct {
	mock *MockShippingAddressService
}

// NewMockShippingAddressService creates a new mock instance.
func NewMockShippingAddressService(ctrl *gomock.Controller) *MockShippingAddressService {
	mock := &MockShippingAddressService{ctrl: ctrl}
	mock.recorder = &MockShippingAddressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShippingAddressService) EXPECT() *MockShippingAddressServiceMockRecorder {
	return m.recorder
}

// CreateShippingAddress mocks base method.
func (m *MockShippingAddressService) CreateShippingAddress(arg0, arg1, arg2, arg3, arg4 string, arg5, arg6 int) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShippingAddress", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateShippingAddress indicates an expected call of CreateShippingAddress.
func (mr *MockShippingAddressServiceMockRecorder) CreateShippingAddress(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShippingAddress", reflect.TypeOf((*MockShippingAddressService)(nil).CreateShippingAddress), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// DeleteShippingAddressById mocks base method.
func (m *MockShippingAddressService) DeleteShippingAddressById(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShippingAddressById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteShippingAddressById indicates an expected call of DeleteShippingAddressById.
func (mr *MockShippingAddressServiceMockRecorder) DeleteShippingAddressById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShippingAddressById", reflect.TypeOf((*MockShippingAddressService)(nil).DeleteShippingAddressById), arg0)
}

// GetShippingAddressById mocks base method.
func (m *MockShippingAddressService) GetShippingAddressById(arg0 string) (*domain.ShippingAddress, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingAddressById", arg0)
	ret0, _ := ret[0].(*domain.ShippingAddress)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetShippingAddressById indicates an expected call of GetShippingAddressById.
func (mr *MockShippingAddressServiceMockRecorder) GetShippingAddressById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingAddressById", reflect.TypeOf((*MockShippingAddressService)(nil).GetShippingAddressById), arg0)
}

// UpdateShippingAddressById mocks base method.
func (m *MockShippingAddressService) UpdateShippingAddressById(arg0 string, arg1 domain.ShippingAddress) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShippingAddressById", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateShippingAddressById indicates an expected call of UpdateShippingAddressById.
func (mr *MockShippingAddressServiceMockRecorder) UpdateShippingAddressById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShippingAddressById", reflect.TypeOf((*MockShippingAddressService)(nil).UpdateShippingAddressById), arg0, arg1)
}
