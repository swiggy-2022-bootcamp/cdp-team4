// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/shipping/domain (interfaces: ShippingCostService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/shipping/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/shipping/utils/errs"
)

// MockShippingCostService is a mock of ShippingCostService interface.
type MockShippingCostService struct {
	ctrl     *gomock.Controller
	recorder *MockShippingCostServiceMockRecorder
}

// MockShippingCostServiceMockRecorder is the mock recorder for MockShippingCostService.
type MockShippingCostServiceMockRecorder struct {
	mock *MockShippingCostService
}

// NewMockShippingCostService creates a new mock instance.
func NewMockShippingCostService(ctrl *gomock.Controller) *MockShippingCostService {
	mock := &MockShippingCostService{ctrl: ctrl}
	mock.recorder = &MockShippingCostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShippingCostService) EXPECT() *MockShippingCostServiceMockRecorder {
	return m.recorder
}

// CreateShippingCost mocks base method.
func (m *MockShippingCostService) CreateShippingCost(arg0 string, arg1 int) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShippingCost", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateShippingCost indicates an expected call of CreateShippingCost.
func (mr *MockShippingCostServiceMockRecorder) CreateShippingCost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShippingCost", reflect.TypeOf((*MockShippingCostService)(nil).CreateShippingCost), arg0, arg1)
}

// DeleteShippingCostByCity mocks base method.
func (m *MockShippingCostService) DeleteShippingCostByCity(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShippingCostByCity", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteShippingCostByCity indicates an expected call of DeleteShippingCostByCity.
func (mr *MockShippingCostServiceMockRecorder) DeleteShippingCostByCity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShippingCostByCity", reflect.TypeOf((*MockShippingCostService)(nil).DeleteShippingCostByCity), arg0)
}

// GetShippingCostByCity mocks base method.
func (m *MockShippingCostService) GetShippingCostByCity(arg0 string) (*domain.ShippingCost, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShippingCostByCity", arg0)
	ret0, _ := ret[0].(*domain.ShippingCost)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetShippingCostByCity indicates an expected call of GetShippingCostByCity.
func (mr *MockShippingCostServiceMockRecorder) GetShippingCostByCity(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShippingCostByCity", reflect.TypeOf((*MockShippingCostService)(nil).GetShippingCostByCity), arg0)
}

// UpdateShippingCost mocks base method.
func (m *MockShippingCostService) UpdateShippingCost(arg0 domain.ShippingCost) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShippingCost", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateShippingCost indicates an expected call of UpdateShippingCost.
func (mr *MockShippingCostServiceMockRecorder) UpdateShippingCost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShippingCost", reflect.TypeOf((*MockShippingCostService)(nil).UpdateShippingCost), arg0)
}
