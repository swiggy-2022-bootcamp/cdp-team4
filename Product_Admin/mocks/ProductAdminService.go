// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/Product_Admin/domain (interfaces: ProductAdminService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/Product_Admin/domain"
)

// MockProductAdminService is a mock of ProductAdminService interface.
type MockProductAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockProductAdminServiceMockRecorder
}

// MockProductAdminServiceMockRecorder is the mock recorder for MockProductAdminService.
type MockProductAdminServiceMockRecorder struct {
	mock *MockProductAdminService
}

// NewMockProductAdminService creates a new mock instance.
func NewMockProductAdminService(ctrl *gomock.Controller) *MockProductAdminService {
	mock := &MockProductAdminService{ctrl: ctrl}
	mock.recorder = &MockProductAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductAdminService) EXPECT() *MockProductAdminServiceMockRecorder {
	return m.recorder
}

// CreateDynamoProductAdminRecord mocks base method.
func (m *MockProductAdminService) CreateDynamoProductAdminRecord(arg0 string, arg1 int64, arg2 float64, arg3, arg4 string, arg5 []domain.ProductSEOURL, arg6, arg7 int64, arg8 string, arg9 bool, arg10, arg11, arg12, arg13 float64, arg14 int64, arg15 []string, arg16 []domain.ProductDescription, arg17 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDynamoProductAdminRecord", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDynamoProductAdminRecord indicates an expected call of CreateDynamoProductAdminRecord.
func (mr *MockProductAdminServiceMockRecorder) CreateDynamoProductAdminRecord(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDynamoProductAdminRecord", reflect.TypeOf((*MockProductAdminService)(nil).CreateDynamoProductAdminRecord), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
}

// DeleteProductById mocks base method.
func (m *MockProductAdminService) DeleteProductById(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductById indicates an expected call of DeleteProductById.
func (mr *MockProductAdminServiceMockRecorder) DeleteProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductById", reflect.TypeOf((*MockProductAdminService)(nil).DeleteProductById), arg0)
}

// GetProduct mocks base method.
func (m *MockProductAdminService) GetProduct() ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct")
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductAdminServiceMockRecorder) GetProduct() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductAdminService)(nil).GetProduct))
}

// GetProductAvailability mocks base method.
func (m *MockProductAdminService) GetProductAvailability(arg0 string, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductAvailability", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductAvailability indicates an expected call of GetProductAvailability.
func (mr *MockProductAdminServiceMockRecorder) GetProductAvailability(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductAvailability", reflect.TypeOf((*MockProductAdminService)(nil).GetProductAvailability), arg0, arg1)
}

// GetProductByCategoryId mocks base method.
func (m *MockProductAdminService) GetProductByCategoryId(arg0 string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByCategoryId", arg0)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByCategoryId indicates an expected call of GetProductByCategoryId.
func (mr *MockProductAdminServiceMockRecorder) GetProductByCategoryId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByCategoryId", reflect.TypeOf((*MockProductAdminService)(nil).GetProductByCategoryId), arg0)
}

// GetProductById mocks base method.
func (m *MockProductAdminService) GetProductById(arg0 string) (domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", arg0)
	ret0, _ := ret[0].(domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockProductAdminServiceMockRecorder) GetProductById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockProductAdminService)(nil).GetProductById), arg0)
}

// GetProductByKeyword mocks base method.
func (m *MockProductAdminService) GetProductByKeyword(arg0 string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByKeyword", arg0)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByKeyword indicates an expected call of GetProductByKeyword.
func (mr *MockProductAdminServiceMockRecorder) GetProductByKeyword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByKeyword", reflect.TypeOf((*MockProductAdminService)(nil).GetProductByKeyword), arg0)
}

// GetProductByManufacturerId mocks base method.
func (m *MockProductAdminService) GetProductByManufacturerId(arg0 string) ([]domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByManufacturerId", arg0)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByManufacturerId indicates an expected call of GetProductByManufacturerId.
func (mr *MockProductAdminServiceMockRecorder) GetProductByManufacturerId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByManufacturerId", reflect.TypeOf((*MockProductAdminService)(nil).GetProductByManufacturerId), arg0)
}

// UpdateProduct mocks base method.
func (m *MockProductAdminService) UpdateProduct(arg0 domain.Product) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductAdminServiceMockRecorder) UpdateProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductAdminService)(nil).UpdateProduct), arg0)
}
