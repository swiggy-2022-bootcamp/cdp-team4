// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/Product_Admin/domain"
)

// ProductAdminService is an autogenerated mock type for the ProductAdminService type
type ProductAdminService struct {
	mock.Mock
}

// CreateDynamoProductAdminRecord provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17
func (_m *ProductAdminService) CreateDynamoProductAdminRecord(_a0 string, _a1 int64, _a2 float64, _a3 string, _a4 string, _a5 []domain.ProductSEOURL, _a6 int64, _a7 int64, _a8 string, _a9 bool, _a10 float64, _a11 float64, _a12 float64, _a13 float64, _a14 int64, _a15 []string, _a16 []domain.ProductDescription, _a17 []string) (string, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int64, float64, string, string, []domain.ProductSEOURL, int64, int64, string, bool, float64, float64, float64, float64, int64, []string, []domain.ProductDescription, []string) string); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64, float64, string, string, []domain.ProductSEOURL, int64, int64, string, bool, float64, float64, float64, float64, int64, []string, []domain.ProductDescription, []string) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5, _a6, _a7, _a8, _a9, _a10, _a11, _a12, _a13, _a14, _a15, _a16, _a17)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductById provides a mock function with given fields: _a0
func (_m *ProductAdminService) DeleteProductById(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProduct provides a mock function with given fields:
func (_m *ProductAdminService) GetProduct() ([]domain.Product, error) {
	ret := _m.Called()

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func() []domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductAvailability provides a mock function with given fields: _a0, _a1
func (_m *ProductAdminService) GetProductAvailability(_a0 string, _a1 int64) (bool, error) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int64) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByCategoryId provides a mock function with given fields: _a0
func (_m *ProductAdminService) GetProductByCategoryId(_a0 string) ([]domain.Product, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(string) []domain.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: _a0
func (_m *ProductAdminService) GetProductById(_a0 string) (domain.Product, error) {
	ret := _m.Called(_a0)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(string) domain.Product); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByKeyword provides a mock function with given fields: _a0
func (_m *ProductAdminService) GetProductByKeyword(_a0 string) ([]domain.Product, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(string) []domain.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByManufacturerId provides a mock function with given fields: _a0
func (_m *ProductAdminService) GetProductByManufacturerId(_a0 string) ([]domain.Product, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(string) []domain.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: _a0
func (_m *ProductAdminService) UpdateProduct(_a0 domain.Product) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(domain.Product) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
