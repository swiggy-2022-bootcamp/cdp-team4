// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/order/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/order/utils/errs"

	mock "github.com/stretchr/testify/mock"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// DeleteOrderById provides a mock function with given fields: _a0
func (_m *OrderRepository) DeleteOrderById(_a0 string) (bool, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// FindAllOrders provides a mock function with given fields:
func (_m *OrderRepository) FindAllOrders() ([]domain.Order, *errs.AppError) {
	ret := _m.Called()

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func() []domain.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func() *errs.AppError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// FindOrderById provides a mock function with given fields: _a0
func (_m *OrderRepository) FindOrderById(_a0 string) (*domain.Order, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 *domain.Order
	if rf, ok := ret.Get(0).(func(string) *domain.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// FindOrderByStatus provides a mock function with given fields: _a0
func (_m *OrderRepository) FindOrderByStatus(_a0 string) ([]domain.Order, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(string) []domain.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// FindOrderByUserId provides a mock function with given fields: _a0
func (_m *OrderRepository) FindOrderByUserId(_a0 string) ([]domain.Order, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(string) []domain.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// InsertOrder provides a mock function with given fields: _a0
func (_m *OrderRepository) InsertOrder(_a0 domain.Order) (string, *errs.AppError) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(domain.Order) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(domain.Order) *errs.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}

// UpdateOrderStatus provides a mock function with given fields: _a0, _a1
func (_m *OrderRepository) UpdateOrderStatus(_a0 string, _a1 string) (bool, *errs.AppError) {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 *errs.AppError
	if rf, ok := ret.Get(1).(func(string, string) *errs.AppError); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*errs.AppError)
		}
	}

	return r0, r1
}
