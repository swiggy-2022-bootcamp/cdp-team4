// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/order/domain (interfaces: OrderService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/order/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/order/utils/errs"
)

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderService) CreateOrder(arg0, arg1 string, arg2, arg3 map[string]int, arg4 int) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceMockRecorder) CreateOrder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderService)(nil).CreateOrder), arg0, arg1, arg2, arg3, arg4)
}

// DeleteOrderById mocks base method.
func (m *MockOrderService) DeleteOrderById(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteOrderById indicates an expected call of DeleteOrderById.
func (mr *MockOrderServiceMockRecorder) DeleteOrderById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderById", reflect.TypeOf((*MockOrderService)(nil).DeleteOrderById), arg0)
}

// GetAllOrders mocks base method.
func (m *MockOrderService) GetAllOrders() ([]domain.Order, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders")
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockOrderServiceMockRecorder) GetAllOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockOrderService)(nil).GetAllOrders))
}

// GetOrderById mocks base method.
func (m *MockOrderService) GetOrderById(arg0 string) (*domain.Order, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById.
func (mr *MockOrderServiceMockRecorder) GetOrderById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockOrderService)(nil).GetOrderById), arg0)
}

// GetOrderByStatus mocks base method.
func (m *MockOrderService) GetOrderByStatus(arg0 string) ([]domain.Order, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByStatus", arg0)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetOrderByStatus indicates an expected call of GetOrderByStatus.
func (mr *MockOrderServiceMockRecorder) GetOrderByStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByStatus", reflect.TypeOf((*MockOrderService)(nil).GetOrderByStatus), arg0)
}

// GetOrderByUserId mocks base method.
func (m *MockOrderService) GetOrderByUserId(arg0 string) ([]domain.Order, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByUserId", arg0)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetOrderByUserId indicates an expected call of GetOrderByUserId.
func (mr *MockOrderServiceMockRecorder) GetOrderByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByUserId", reflect.TypeOf((*MockOrderService)(nil).GetOrderByUserId), arg0)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderService) UpdateOrderStatus(arg0, arg1 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderServiceMockRecorder) UpdateOrderStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderService)(nil).UpdateOrderStatus), arg0, arg1)
}
