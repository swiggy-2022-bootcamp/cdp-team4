// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/cart/domain (interfaces: CartService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/cart/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/cart/utils/errs"
)

// MockCartService is a mock of CartService interface.
type MockCartService struct {
	ctrl     *gomock.Controller
	recorder *MockCartServiceMockRecorder
}

// MockCartServiceMockRecorder is the mock recorder for MockCartService.
type MockCartServiceMockRecorder struct {
	mock *MockCartService
}

// NewMockCartService creates a new mock instance.
func NewMockCartService(ctrl *gomock.Controller) *MockCartService {
	mock := &MockCartService{ctrl: ctrl}
	mock.recorder = &MockCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartService) EXPECT() *MockCartServiceMockRecorder {
	return m.recorder
}

// CreateCart mocks base method.
func (m *MockCartService) CreateCart(arg0 string, arg1 map[string]domain.Item) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartServiceMockRecorder) CreateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartService)(nil).CreateCart), arg0, arg1)
}

// DeleteCartByUserId mocks base method.
func (m *MockCartService) DeleteCartByUserId(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartByUserId", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteCartByUserId indicates an expected call of DeleteCartByUserId.
func (mr *MockCartServiceMockRecorder) DeleteCartByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartByUserId", reflect.TypeOf((*MockCartService)(nil).DeleteCartByUserId), arg0)
}

// DeleteCartItemByUserId mocks base method.
func (m *MockCartService) DeleteCartItemByUserId(arg0 string, arg1 []string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItemByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteCartItemByUserId indicates an expected call of DeleteCartItemByUserId.
func (mr *MockCartServiceMockRecorder) DeleteCartItemByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItemByUserId", reflect.TypeOf((*MockCartService)(nil).DeleteCartItemByUserId), arg0, arg1)
}

// GetAllCarts mocks base method.
func (m *MockCartService) GetAllCarts() ([]domain.Cart, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCarts")
	ret0, _ := ret[0].([]domain.Cart)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetAllCarts indicates an expected call of GetAllCarts.
func (mr *MockCartServiceMockRecorder) GetAllCarts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCarts", reflect.TypeOf((*MockCartService)(nil).GetAllCarts))
}

// GetCartByUserId mocks base method.
func (m *MockCartService) GetCartByUserId(arg0 string) (*domain.Cart, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByUserId", arg0)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetCartByUserId indicates an expected call of GetCartByUserId.
func (mr *MockCartServiceMockRecorder) GetCartByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByUserId", reflect.TypeOf((*MockCartService)(nil).GetCartByUserId), arg0)
}

// UpdateCartItemsByUserId mocks base method.
func (m *MockCartService) UpdateCartItemsByUserId(arg0 string, arg1 map[string]domain.Item) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartItemsByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateCartItemsByUserId indicates an expected call of UpdateCartItemsByUserId.
func (mr *MockCartServiceMockRecorder) UpdateCartItemsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartItemsByUserId", reflect.TypeOf((*MockCartService)(nil).UpdateCartItemsByUserId), arg0, arg1)
}
