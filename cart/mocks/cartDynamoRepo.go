// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/cart/domain (interfaces: CartRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/cart/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/cart/utils/errs"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// DeleteCartById mocks base method.
func (m *MockCartRepository) DeleteCartById(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartById", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteCartById indicates an expected call of DeleteCartById.
func (mr *MockCartRepositoryMockRecorder) DeleteCartById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartById", reflect.TypeOf((*MockCartRepository)(nil).DeleteCartById), arg0)
}

// DeleteCartByUserId mocks base method.
func (m *MockCartRepository) DeleteCartByUserId(arg0 string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartByUserId", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteCartByUserId indicates an expected call of DeleteCartByUserId.
func (mr *MockCartRepositoryMockRecorder) DeleteCartByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartByUserId", reflect.TypeOf((*MockCartRepository)(nil).DeleteCartByUserId), arg0)
}

// DeleteCartItemByUserId mocks base method.
func (m *MockCartRepository) DeleteCartItemByUserId(arg0 string, arg1 []string) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItemByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// DeleteCartItemByUserId indicates an expected call of DeleteCartItemByUserId.
func (mr *MockCartRepositoryMockRecorder) DeleteCartItemByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItemByUserId", reflect.TypeOf((*MockCartRepository)(nil).DeleteCartItemByUserId), arg0, arg1)
}

// FindAllCarts mocks base method.
func (m *MockCartRepository) FindAllCarts() ([]domain.Cart, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCarts")
	ret0, _ := ret[0].([]domain.Cart)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindAllCarts indicates an expected call of FindAllCarts.
func (mr *MockCartRepositoryMockRecorder) FindAllCarts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCarts", reflect.TypeOf((*MockCartRepository)(nil).FindAllCarts))
}

// FindCartById mocks base method.
func (m *MockCartRepository) FindCartById(arg0 string) (*domain.Cart, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartById", arg0)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindCartById indicates an expected call of FindCartById.
func (mr *MockCartRepositoryMockRecorder) FindCartById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartById", reflect.TypeOf((*MockCartRepository)(nil).FindCartById), arg0)
}

// FindCartByUserId mocks base method.
func (m *MockCartRepository) FindCartByUserId(arg0 string) (*domain.Cart, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartByUserId", arg0)
	ret0, _ := ret[0].(*domain.Cart)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindCartByUserId indicates an expected call of FindCartByUserId.
func (mr *MockCartRepositoryMockRecorder) FindCartByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartByUserId", reflect.TypeOf((*MockCartRepository)(nil).FindCartByUserId), arg0)
}

// InsertCart mocks base method.
func (m *MockCartRepository) InsertCart(arg0 domain.Cart) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCart", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// InsertCart indicates an expected call of InsertCart.
func (mr *MockCartRepositoryMockRecorder) InsertCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCart", reflect.TypeOf((*MockCartRepository)(nil).InsertCart), arg0)
}

// UpdateCartByUserId mocks base method.
func (m *MockCartRepository) UpdateCartByUserId(arg0 string, arg1 map[string]domain.Item) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateCartByUserId indicates an expected call of UpdateCartByUserId.
func (mr *MockCartRepositoryMockRecorder) UpdateCartByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartByUserId", reflect.TypeOf((*MockCartRepository)(nil).UpdateCartByUserId), arg0, arg1)
}
