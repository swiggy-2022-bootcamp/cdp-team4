// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/reward/domain (interfaces: RewardRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/reward/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/reward/utils/errs"
)

// MockRewardRepository is a mock of RewardRepository interface.
type MockRewardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRewardRepositoryMockRecorder
}

// MockRewardRepositoryMockRecorder is the mock recorder for MockRewardRepository.
type MockRewardRepositoryMockRecorder struct {
	mock *MockRewardRepository
}

// NewMockRewardRepository creates a new mock instance.
func NewMockRewardRepository(ctrl *gomock.Controller) *MockRewardRepository {
	mock := &MockRewardRepository{ctrl: ctrl}
	mock.recorder = &MockRewardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardRepository) EXPECT() *MockRewardRepositoryMockRecorder {
	return m.recorder
}

// FindRewardById mocks base method.
func (m *MockRewardRepository) FindRewardById(arg0 string) (*domain.Reward, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRewardById", arg0)
	ret0, _ := ret[0].(*domain.Reward)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindRewardById indicates an expected call of FindRewardById.
func (mr *MockRewardRepositoryMockRecorder) FindRewardById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRewardById", reflect.TypeOf((*MockRewardRepository)(nil).FindRewardById), arg0)
}

// FindRewardByUserId mocks base method.
func (m *MockRewardRepository) FindRewardByUserId(arg0 string) (*domain.Reward, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRewardByUserId", arg0)
	ret0, _ := ret[0].(*domain.Reward)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// FindRewardByUserId indicates an expected call of FindRewardByUserId.
func (mr *MockRewardRepositoryMockRecorder) FindRewardByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRewardByUserId", reflect.TypeOf((*MockRewardRepository)(nil).FindRewardByUserId), arg0)
}

// InsertReward mocks base method.
func (m *MockRewardRepository) InsertReward(arg0 domain.Reward) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReward", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// InsertReward indicates an expected call of InsertReward.
func (mr *MockRewardRepositoryMockRecorder) InsertReward(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReward", reflect.TypeOf((*MockRewardRepository)(nil).InsertReward), arg0)
}

// UpdateRewardByUserId mocks base method.
func (m *MockRewardRepository) UpdateRewardByUserId(arg0 string, arg1 int) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRewardByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateRewardByUserId indicates an expected call of UpdateRewardByUserId.
func (mr *MockRewardRepositoryMockRecorder) UpdateRewardByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRewardByUserId", reflect.TypeOf((*MockRewardRepository)(nil).UpdateRewardByUserId), arg0, arg1)
}
