// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/swiggy-2022-bootcamp/cdp-team4/reward/domain (interfaces: RewardService)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/swiggy-2022-bootcamp/cdp-team4/reward/domain"
	errs "github.com/swiggy-2022-bootcamp/cdp-team4/reward/utils/errs"
)

// MockRewardService is a mock of RewardService interface.
type MockRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServiceMockRecorder
}

// MockRewardServiceMockRecorder is the mock recorder for MockRewardService.
type MockRewardServiceMockRecorder struct {
	mock *MockRewardService
}

// NewMockRewardService creates a new mock instance.
func NewMockRewardService(ctrl *gomock.Controller) *MockRewardService {
	mock := &MockRewardService{ctrl: ctrl}
	mock.recorder = &MockRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardService) EXPECT() *MockRewardServiceMockRecorder {
	return m.recorder
}

// CreateReward mocks base method.
func (m *MockRewardService) CreateReward(arg0 string, arg1 int) (string, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReward", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// CreateReward indicates an expected call of CreateReward.
func (mr *MockRewardServiceMockRecorder) CreateReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReward", reflect.TypeOf((*MockRewardService)(nil).CreateReward), arg0, arg1)
}

// GetRewardById mocks base method.
func (m *MockRewardService) GetRewardById(arg0 string) (*domain.Reward, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardById", arg0)
	ret0, _ := ret[0].(*domain.Reward)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetRewardById indicates an expected call of GetRewardById.
func (mr *MockRewardServiceMockRecorder) GetRewardById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardById", reflect.TypeOf((*MockRewardService)(nil).GetRewardById), arg0)
}

// GetRewardByUserId mocks base method.
func (m *MockRewardService) GetRewardByUserId(arg0 string) (*domain.Reward, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardByUserId", arg0)
	ret0, _ := ret[0].(*domain.Reward)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// GetRewardByUserId indicates an expected call of GetRewardByUserId.
func (mr *MockRewardServiceMockRecorder) GetRewardByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardByUserId", reflect.TypeOf((*MockRewardService)(nil).GetRewardByUserId), arg0)
}

// UpdateRewardByUserId mocks base method.
func (m *MockRewardService) UpdateRewardByUserId(arg0 string, arg1 int) (bool, *errs.AppError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRewardByUserId", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*errs.AppError)
	return ret0, ret1
}

// UpdateRewardByUserId indicates an expected call of UpdateRewardByUserId.
func (mr *MockRewardServiceMockRecorder) UpdateRewardByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRewardByUserId", reflect.TypeOf((*MockRewardService)(nil).UpdateRewardByUserId), arg0, arg1)
}
